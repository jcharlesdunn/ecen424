# Daniel Cueva
# Net ID: dcueva91

# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 

.align 8
# Source block
src:
.quad 0x00a
.quad 0x0b0
.quad 0xc00
# Destination block
dest:
.quad 0x111
.quad 0x222
.quad 0x333

main:	irmovq 	src, %rdi		# Move src pointer to first param
		irmovq	dest, %rsi		# Move dest pointer to 2nd param
		irmovq 	$3, %rdx		# Set the length param. Param 3
		call 	copy_block		# copy_block(source, dest, length)
		ret

copy_block:
		#testq	%rdx, %rdx		#Test the length
	rrmovq		%rdx, %r9		#Move %rdx, so it can be tested
	andq		%r9, %r9		#set condition codes
	jle	end						#jump to end
	irmovq		$0, %rcx		#Set %rcx to 0
	irmovq		$0, %rax		#Set %rax to 0
loop:
		#preform %rcx*8
	rrmovq		%rcx, %r10		#Move %rcx
	addq		%rcx, %r10		#%rcx * 2
	addq		%r10, %r10		#%rcx * 4
	addq		%r10, %r10		#%rcx * 8
	rrmovq		%r10, %r11		
	addq		%rdi, %r10		#%rdi + %rcx * 8
	mrmovq		(%r10), %r8		#move (%rdi + %rcx * 8)
	addq		%rsi, %r11		#%rsi + %rcx * 8
	rmmovq		%r8, (%r11)		#move (%rsi + %rcx * 8)
	xorq		%r8, %rax		#xor %r8 and %rax
	irmovq		$1, %r14		#Store 1
	addq		%r14, %rcx		#Add 1 to %rcx
		#cmpq	%rdx, %rcx
	rrmovq		%rdx, %r12		#Store %rdx for comp
	rrmovq		%rcx, %r13		#Store %rcx for comp
	subq		%r12, %r13		#Comp %rdx, %rcx
	jne			loop			#Loop back
	ret
end:
	irmovq		$0, %rax		#Set %rax to 0
	ret

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
