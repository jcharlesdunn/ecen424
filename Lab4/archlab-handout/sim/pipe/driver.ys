#######################################################################
# Test for copying block of size K;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $K, %rdx		# src and dst have K elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Daniel Cueva
# Net ID: dcueva91
#
# To optimize this code, I first implemented the iaddq instruction
# This cut down on the extra work of moving an immediate to a register
# prior to adding the two.
# I then started to implement loop unrolling
# I started with a loop unrolling factor of 2, then later extended it to 4
# 
# Loop unrolling is done by first chacking to see if there is more or equal
# than the loop factor remaining on the elements
# If not, we can jump to the cleanup code (when less than factor is left)
# If there are at least loop factor elements we can start unrolling.
# At each stage of the unroll we copy one element from src to dest
# every other stage we will store two items from source
#	This eliminates load hazards by not storing and copying back to back
# The count is updated through the unrolling
# When the loop has executed to the point where there are less than
# loop elements remaining to copy, we go to cleanup code
# At cleanup, we copy the remaining elements over
# checking each one to continue.
#
#Once done, the function returns
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq 	%rax, %rax		# count = 0;	
	andq 	%rdx, %rdx		# if length <= 0
	jle 	Done			# if so, goto Done:
	iaddq	$-6, %rdx		#Decrement length by 4
	jl		Cleanup			#If less than 0, go to cleanup
Loop:	
	mrmovq 	(%rdi), %r10	#Store src[i]
	mrmovq	8(%rdi), %r11	#store src[i+1]. Avoid load hazard
	rmmovq 	%r10, (%rsi)	#src[i] to dest[i]
	andq 	%r10, %r10		#set CC for src[i]
	jle 	Next1			#if src[i] <= 0, go to next1
	iaddq 	$1, %rax		# count++
Next1:	
	rmmovq	%r11, 8(%rsi)	#src[i+1] to dest[i+1]
	andq	%r11, %r11		#set CC for src[i+1]
	jle		Next2			#if src[i+1] <= 0, next2
	iaddq 	$1, %rax		# count++
Next2:
	mrmovq 	16(%rdi), %r10	#Store src[i+2]
	mrmovq	24(%rdi), %r11	#store src[i+3]. Avoid load hazard
	rmmovq 	%r10, 16(%rsi)	#src[i+2] to dest[i+2]
	andq 	%r10, %r10		#set CC for src[i+2]
	jle 	Next3			#if src[i+2] <= 0, go to next1
	iaddq 	$1, %rax		# count++
Next3:	
	rmmovq	%r11, 24(%rsi)	#src[i+3] to dest[i+3]
	andq	%r11, %r11		#set CC for src[i+3]
	jle		Next4			#if src[i+3] <= 0, next4
	iaddq 	$1, %rax		# count++
Next4:
	mrmovq 	32(%rdi), %r10	#Store src[i+4]
	mrmovq	40(%rdi), %r11	#store src[i+5]. Avoid load hazard
	rmmovq 	%r10, 32(%rsi)	#src[i+4] to dest[i+4]
	andq 	%r10, %r10		#set CC for src[i+4]
	jle 	Next5			#if src[i+4] <= 0, go to next1
	iaddq 	$1, %rax		# count++
Next5:	
	rmmovq	%r11, 40(%rsi)	#src[i+5] to dest[i+5]
	andq	%r11, %r11		#set CC for src[i+5]
	jle		Check			#if src[i+5] <= 0, next2
	iaddq 	$1, %rax		# count++
Check:
	iaddq	$48, %rdi		#add 32(4 bytes) to src
	iaddq	$48, %rsi		#add 32(4 bytes) to dest
	iaddq	$-6, %rdx		#Length - 4. Set CC
	jge		Loop			#If length is still above 0, loop
#Now we have gone through the loop with multiple of 4
#We have to clean up the code, because there could be 0-3 things
#To still update
#Run through the same code, but only on the items left
Cleanup:
	iaddq	$6, %rdx		#Add 4 back to length to restore the value
Cleanup1:
	iaddq	$-1, %rdx		#Subtract 1 to length, set CC
	jl		Done			#If there are 0 left, jump to done
	mrmovq 	(%rdi), %r10	#Store src[i]
	mrmovq	8(%rdi), %r11	#store src[i+1]. Avoid load hazard
	rmmovq 	%r10, (%rsi)	#src[i] to dest[i]
	andq 	%r10, %r10		#set CC for src[i]
	jle 	Cleanup2		#if src[i] <= 0, go to cleanup2
	iaddq 	$1, %rax		# count++
Cleanup2:	
	iaddq	$-1, %rdx		#Subtract 1 to length, set CC
	jl		Done			#If there are 0 left, jump to done
	rmmovq	%r11, 8(%rsi)	#src[i+1] to dest[i+1]
	andq	%r11, %r11		#set CC for src[i+1]
	jle		Cleanup3		#if src[i+1] <= 0, cleanup3
	iaddq 	$1, %rax		# count++
Cleanup3:
	iaddq	$-1, %rdx		#Subtract 1 to length, set CC
	jl		Done			#If there are 0 left, jump to done
	mrmovq 	16(%rdi), %r10	#Store src[i+2]
	mrmovq	24(%rdi), %r11	#store src[i+3]. Avoid load hazard
	rmmovq 	%r10, 16(%rsi)	#src[i+2] to dest[i+2]
	andq 	%r10, %r10		#set CC for src[i+2]
	jle 	Cleanup4		#if src[i+2] <= 0, go to cleanup2
	iaddq 	$1, %rax		# count++
Cleanup4:	
	iaddq	$-1, %rdx		#Subtract 1 to length, set CC
	jl		Done			#If there are 0 left, jump to done
	rmmovq	%r11, 24(%rsi)	#src[i+3] to dest[i+3]
	andq	%r11, %r11		#set CC for src[i+3]
	jle		Cleanup5		#if src[i+1] <= 0, cleanup3
	iaddq 	$1, %rax		# count++
Cleanup5:
	iaddq	$-1, %rdx		#Subtract 1 to length, set CC
	jl		Done			#If there are 0 left, jump to done
	mrmovq 	32(%rdi), %r10	#Store src[i+4]
	rmmovq 	%r10, 32(%rsi)	#src[i+4] to dest[i+4]
	andq 	%r10, %r10		#set CC for src[i+4]
	jle 	Done			#if src[i+4] <= 0, go to done
	iaddq 	$1, %rax		# count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 0.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $0,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $K,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
