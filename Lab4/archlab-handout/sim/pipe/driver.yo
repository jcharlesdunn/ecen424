                            | #######################################################################
                            | # Test for copying block of size K;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4b004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f2ffffffffffffffff | 	irmovq $K, %rdx		# src and dst have K elements
0x014: 30f62804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 80af02000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Daniel Cueva
                            | # Net ID: dcueva91
                            | #
                            | # To optimize this code, I first implemented the iaddq instruction
                            | # This cut down on the extra work of moving an immediate to a register
                            | # prior to adding the two.
                            | # I then started to implement loop unrolling
                            | # I started with a loop unrolling factor of 2, then later extended it to 4
                            | # 
                            | # Loop unrolling is done by first chacking to see if there is more or equal
                            | # than the loop factor remaining on the elements
                            | # If not, we can jump to the cleanup code (when less than factor is left)
                            | # If there are at least loop factor elements we can start unrolling.
                            | # At each stage of the unroll we copy one element from src to dest
                            | # every other stage we will store two items from source
                            | #	This eliminates load hazards by not storing and copying back to back
                            | # The count is updated through the unrolling
                            | # When the loop has executed to the point where there are less than
                            | # loop elements remaining to copy, we go to cleanup code
                            | # At cleanup, we copy the remaining elements over
                            | # checking each one to continue.
                            | #
                            | #Once done, the function returns
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq 	%rax, %rax		# count = 0;	
0x03d: 6222                 | 	andq 	%rdx, %rdx		# if length <= 0
0x03f: 71ae02000000000000   | 	jle 	Done			# if so, goto Done:
0x048: c0f2faffffffffffffff | 	iaddq	$-6, %rdx		#Decrement length by 4
0x052: 727801000000000000   | 	jl		Cleanup			#If less than 0, go to cleanup
0x05b:                      | Loop:	
0x05b: 50a70000000000000000 | 	mrmovq 	(%rdi), %r10	#Store src[i]
0x065: 50b70800000000000000 | 	mrmovq	8(%rdi), %r11	#store src[i+1]. Avoid load hazard
0x06f: 40a60000000000000000 | 	rmmovq 	%r10, (%rsi)	#src[i] to dest[i]
0x079: 62aa                 | 	andq 	%r10, %r10		#set CC for src[i]
0x07b: 718e00000000000000   | 	jle 	Next1			#if src[i] <= 0, go to next1
0x084: c0f00100000000000000 | 	iaddq 	$1, %rax		# count++
0x08e:                      | Next1:	
0x08e: 40b60800000000000000 | 	rmmovq	%r11, 8(%rsi)	#src[i+1] to dest[i+1]
0x098: 62bb                 | 	andq	%r11, %r11		#set CC for src[i+1]
0x09a: 71ad00000000000000   | 	jle		Next2			#if src[i+1] <= 0, next2
0x0a3: c0f00100000000000000 | 	iaddq 	$1, %rax		# count++
0x0ad:                      | Next2:
0x0ad: 50a71000000000000000 | 	mrmovq 	16(%rdi), %r10	#Store src[i+2]
0x0b7: 50b71800000000000000 | 	mrmovq	24(%rdi), %r11	#store src[i+3]. Avoid load hazard
0x0c1: 40a61000000000000000 | 	rmmovq 	%r10, 16(%rsi)	#src[i+2] to dest[i+2]
0x0cb: 62aa                 | 	andq 	%r10, %r10		#set CC for src[i+2]
0x0cd: 71e000000000000000   | 	jle 	Next3			#if src[i+2] <= 0, go to next1
0x0d6: c0f00100000000000000 | 	iaddq 	$1, %rax		# count++
0x0e0:                      | Next3:	
0x0e0: 40b61800000000000000 | 	rmmovq	%r11, 24(%rsi)	#src[i+3] to dest[i+3]
0x0ea: 62bb                 | 	andq	%r11, %r11		#set CC for src[i+3]
0x0ec: 71ff00000000000000   | 	jle		Next4			#if src[i+3] <= 0, next4
0x0f5: c0f00100000000000000 | 	iaddq 	$1, %rax		# count++
0x0ff:                      | Next4:
0x0ff: 50a72000000000000000 | 	mrmovq 	32(%rdi), %r10	#Store src[i+4]
0x109: 50b72800000000000000 | 	mrmovq	40(%rdi), %r11	#store src[i+5]. Avoid load hazard
0x113: 40a62000000000000000 | 	rmmovq 	%r10, 32(%rsi)	#src[i+4] to dest[i+4]
0x11d: 62aa                 | 	andq 	%r10, %r10		#set CC for src[i+4]
0x11f: 713201000000000000   | 	jle 	Next5			#if src[i+4] <= 0, go to next1
0x128: c0f00100000000000000 | 	iaddq 	$1, %rax		# count++
0x132:                      | Next5:	
0x132: 40b62800000000000000 | 	rmmovq	%r11, 40(%rsi)	#src[i+5] to dest[i+5]
0x13c: 62bb                 | 	andq	%r11, %r11		#set CC for src[i+5]
0x13e: 715101000000000000   | 	jle		Check			#if src[i+5] <= 0, next2
0x147: c0f00100000000000000 | 	iaddq 	$1, %rax		# count++
0x151:                      | Check:
0x151: c0f73000000000000000 | 	iaddq	$48, %rdi		#add 32(4 bytes) to src
0x15b: c0f63000000000000000 | 	iaddq	$48, %rsi		#add 32(4 bytes) to dest
0x165: c0f2faffffffffffffff | 	iaddq	$-6, %rdx		#Length - 4. Set CC
0x16f: 755b00000000000000   | 	jge		Loop			#If length is still above 0, loop
                            | #Now we have gone through the loop with multiple of 4
                            | #We have to clean up the code, because there could be 0-3 things
                            | #To still update
                            | #Run through the same code, but only on the items left
0x178:                      | Cleanup:
0x178: c0f20600000000000000 | 	iaddq	$6, %rdx		#Add 4 back to length to restore the value
0x182:                      | Cleanup1:
0x182: c0f2ffffffffffffffff | 	iaddq	$-1, %rdx		#Subtract 1 to length, set CC
0x18c: 72ae02000000000000   | 	jl		Done			#If there are 0 left, jump to done
0x195: 50a70000000000000000 | 	mrmovq 	(%rdi), %r10	#Store src[i]
0x19f: 50b70800000000000000 | 	mrmovq	8(%rdi), %r11	#store src[i+1]. Avoid load hazard
0x1a9: 40a60000000000000000 | 	rmmovq 	%r10, (%rsi)	#src[i] to dest[i]
0x1b3: 62aa                 | 	andq 	%r10, %r10		#set CC for src[i]
0x1b5: 71c801000000000000   | 	jle 	Cleanup2		#if src[i] <= 0, go to cleanup2
0x1be: c0f00100000000000000 | 	iaddq 	$1, %rax		# count++
0x1c8:                      | Cleanup2:	
0x1c8: c0f2ffffffffffffffff | 	iaddq	$-1, %rdx		#Subtract 1 to length, set CC
0x1d2: 72ae02000000000000   | 	jl		Done			#If there are 0 left, jump to done
0x1db: 40b60800000000000000 | 	rmmovq	%r11, 8(%rsi)	#src[i+1] to dest[i+1]
0x1e5: 62bb                 | 	andq	%r11, %r11		#set CC for src[i+1]
0x1e7: 71fa01000000000000   | 	jle		Cleanup3		#if src[i+1] <= 0, cleanup3
0x1f0: c0f00100000000000000 | 	iaddq 	$1, %rax		# count++
0x1fa:                      | Cleanup3:
0x1fa: c0f2ffffffffffffffff | 	iaddq	$-1, %rdx		#Subtract 1 to length, set CC
0x204: 72ae02000000000000   | 	jl		Done			#If there are 0 left, jump to done
0x20d: 50a71000000000000000 | 	mrmovq 	16(%rdi), %r10	#Store src[i+2]
0x217: 50b71800000000000000 | 	mrmovq	24(%rdi), %r11	#store src[i+3]. Avoid load hazard
0x221: 40a61000000000000000 | 	rmmovq 	%r10, 16(%rsi)	#src[i+2] to dest[i+2]
0x22b: 62aa                 | 	andq 	%r10, %r10		#set CC for src[i+2]
0x22d: 714002000000000000   | 	jle 	Cleanup4		#if src[i+2] <= 0, go to cleanup2
0x236: c0f00100000000000000 | 	iaddq 	$1, %rax		# count++
0x240:                      | Cleanup4:	
0x240: c0f2ffffffffffffffff | 	iaddq	$-1, %rdx		#Subtract 1 to length, set CC
0x24a: 72ae02000000000000   | 	jl		Done			#If there are 0 left, jump to done
0x253: 40b61800000000000000 | 	rmmovq	%r11, 24(%rsi)	#src[i+3] to dest[i+3]
0x25d: 62bb                 | 	andq	%r11, %r11		#set CC for src[i+3]
0x25f: 717202000000000000   | 	jle		Cleanup5		#if src[i+1] <= 0, cleanup3
0x268: c0f00100000000000000 | 	iaddq 	$1, %rax		# count++
0x272:                      | Cleanup5:
0x272: c0f2ffffffffffffffff | 	iaddq	$-1, %rdx		#Subtract 1 to length, set CC
0x27c: 72ae02000000000000   | 	jl		Done			#If there are 0 left, jump to done
0x285: 50a72000000000000000 | 	mrmovq 	32(%rdi), %r10	#Store src[i+4]
0x28f: 40a62000000000000000 | 	rmmovq 	%r10, 32(%rsi)	#src[i+4] to dest[i+4]
0x299: 62aa                 | 	andq 	%r10, %r10		#set CC for src[i+4]
0x29b: 71ae02000000000000   | 	jle 	Done			#if src[i+4] <= 0, go to done
0x2a4: c0f00100000000000000 | 	iaddq 	$1, %rax		# count++
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2ae:                      | Done:
0x2ae: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2af:                      | End:
                            | #/* $end ncopy-ys */
0x2af:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x2af:                      | check:
                            | 	# Return value test
0x2af: 30fa0000000000000000 | 	irmovq $0,%r10
0x2b9: 61a0                 | 	subq %r10,%rax
0x2bb: 73d702000000000000   | 	je checkb
0x2c4: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x2ce: 701504000000000000   | 	jmp cdone
0x2d7:                      | checkb:
                            | 	# Code length check
0x2d7: 30f0af02000000000000 | 	irmovq EndFun,%rax
0x2e1: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x2eb: 6120                 | 	subq %rdx,%rax
0x2ed: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x2f7: 6102                 | 	subq %rax,%rdx
0x2f9: 751503000000000000   | 	jge checkm
0x302: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x30c: 701504000000000000   | 	jmp cdone
0x315:                      | checkm:
0x315: 30f22804000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x31f: 30f31804000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x329: 30f7ffffffffffffffff | 	irmovq $K,%rdi  # Count
0x333: 6277                 | 	andq %rdi,%rdi
0x335: 739303000000000000   | 	je checkpre         # Skip check if count = 0
0x33e:                      | mcloop:
0x33e: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x348: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x352: 6160                 | 	subq %rsi,%rax
0x354: 737003000000000000   | 	je  mok
0x35d: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x367: 701504000000000000   | 	jmp cdone
0x370:                      | mok:
0x370: 30f00800000000000000 | 	irmovq $8,%rax
0x37a: 6002                 | 	addq %rax,%rdx	  # dest ++
0x37c: 6003                 | 	addq %rax,%rbx    # src++
0x37e: 30f00100000000000000 | 	irmovq $1,%rax
0x388: 6107                 | 	subq %rax,%rdi    # cnt--
0x38a: 763e03000000000000   | 	jg mcloop
0x393:                      | checkpre:
                            | 	# Check for corruption
0x393: 30f22004000000000000 | 	irmovq Predest,%rdx
0x39d: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x3a7: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x3b1: 6120                 | 	subq %rdx,%rax
0x3b3: 73cf03000000000000   | 	je checkpost
0x3bc: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x3c6: 701504000000000000   | 	jmp cdone
0x3cf:                      | checkpost:
                            | 	# Check for corruption
0x3cf: 30f22804000000000000 | 	irmovq Postdest,%rdx
0x3d9: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x3e3: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x3ed: 6120                 | 	subq %rdx,%rax
0x3ef: 730b04000000000000   | 	je checkok
0x3f8: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x402: 701504000000000000   | 	jmp cdone
0x40b:                      | checkok:
                            | 	# Successful checks
0x40b: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x415:                      | cdone:
0x415: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x418:                      | 	.align 8
0x418:                      | src:
0x418: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x420:                      | 	.align 16
0x420:                      | Predest:
0x420: fadebc0000000000     | 	.quad 0xbcdefa
0x428:                      | dest:
0x428:                      | Postdest:
0x428: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x430:                      | .align 8
                            | # Run time stack
0x430: 0000000000000000     | 	.quad 0
0x438: 0000000000000000     | 	.quad 0
0x440: 0000000000000000     | 	.quad 0
0x448: 0000000000000000     | 	.quad 0
0x450: 0000000000000000     | 	.quad 0
0x458: 0000000000000000     | 	.quad 0
0x460: 0000000000000000     | 	.quad 0
0x468: 0000000000000000     | 	.quad 0
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
                            | 
0x4b0:                      | Stack:
